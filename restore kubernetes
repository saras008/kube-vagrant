sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter
sudo sysctl --system
sudo apt-get install -y apt-transport-https ca-certificates curl gnupg gpg
sudo apt-get install -y containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo systemctl restart containerd
sudo systemctl enable containerd

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.asc > /dev/null
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update -y
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl enable kubelet
sudo systemctl start kubelet
cat <<EOF | sudo tee kubeadm-config.yaml
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
kubernetesVersion: "v1.30.0"
controlPlaneEndpoint: "k8s-master:6443"
networking:
  podSubnet: "192.168.1.0/16"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
EOF
sudo kubeadm init --config kubeadm-config.yaml
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubeadm token create --print-join-command

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml  


kubeadm join 172.16.129.158:6443 --token qwncff.djsmq401jvm1a69o --discovery-token-ca-cert-hash sha256:509703ff26c11caca254b189fc3d47d25996c940b12a36f56bef0c18b494e9aa

kubectl get nodes

Check API Server Logs

kubectl logs -n kube-system kube-apiserver-$(hostname)

Check node

journalctl -u kubelet -f

journalctl -u containerd/docker -f

kubectl logs <pod-name> -n <namespace>

kubectl logs -f -l app=<app-label> -n <namespace>

Debug pod
kubectl describe pod <pod-name> -n <namespace>
kubectl logs <pod-name> --previous -n <namespace> # Logs from last restart
kubectl exec -it <pod-name> -- /bin/sh # Access container shell

Backup Cluster Kubernetes
sudo apt install etcd-client
sudo mkdir -p /backup
sudo chmod 777 /backup  # Give full permissions (or adjust as needed)

#connect host to cluster kubernetes

vagrant ssh k8s-master -c "sudo cat /etc/kubernetes/admin.conf" > ~/.kube/config
chmod 600 ~/.kube/config
export KUBECONFIG=~/.kube/config
kubectl get nodes


kubectl -n kube-system get cm kubeadm-config -o yaml

## Common issue on lab vagrat 
sudo systemctl stop kubelet
sudo systemctl stop containerd
sudo rm -rf /etc/kubernetes /var/lib/etcd /var/lib/kubelet /var/lib/cni
sudo systemctl restart containerd
sudo systemctl enable containerd
sudo kubeadm reset -f
sudo kubeadm init --pod-network-cidr=192.168.1.0/16

sudo crictl stop 11f368cb6fb3d
sudo crictl rm 11f368cb6fb3d
